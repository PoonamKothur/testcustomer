{
  "service": {
    "service": "cw-customers",
    "serviceObject": {
      "name": "cw-customers"
    },
    "provider": {
      "stage": "dev",
      "variableSyntax": "\\${([ ~:a-zA-Z0-9._@'\",\\-\\/\\(\\)*?]+?)}",
      "name": "aws",
      "runtime": "nodejs10.x",
      "timeout": 30,
      "region": "ap-south-1",
      "environment": {
        "STAGE": "dev"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:CreateTable",
            "dynamodb:DescribeTable",
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "lambda:Invoke",
            "lambda:InvokeFunction"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cognito-idp:*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "sns:Publish"
          ],
          "Resource": "*"
        }
      ],
      "versionFunctions": true,
      "remoteFunctionData": null,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "GetcustomerbyidLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cw-customers-dev-getcustomerbyid"
            }
          },
          "CreatecustomerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cw-customers-dev-createcustomer"
            }
          },
          "AwsmanagerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cw-customers-dev-awsmanager"
            }
          },
          "CreatecustomerresourcesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cw-customers-dev-createcustomerresources"
            }
          },
          "UpdatecustomerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cw-customers-dev-updatecustomer"
            }
          },
          "AdmincustomerresourcesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cw-customers-dev-admincustomerresources"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "dev",
                        "cw-customers",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cw-customers-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cw-customers-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][1]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][2]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][3]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "cw-customers",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "GetcustomerbyidLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cw-customers/dev/1575274586882-2019-12-02T08:16:26.882Z/cw-customers.zip"
              },
              "FunctionName": "cw-customers-dev-getcustomerbyid",
              "Handler": "handlers/getcustomerbyid.getcustomer",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAGE": "dev"
                }
              }
            },
            "DependsOn": [
              "GetcustomerbyidLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "GetcustomerbyidLambdaVersionWFu3Z9OdslZ04Yg9vB7wQpXl3e3GPwT9kuHMcqmBSnI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetcustomerbyidLambdaFunction"
              },
              "CodeSha256": "GO6Au7ltKxc1PnfoZjzkySbn8RfjAGPHzL3DcXp2QME="
            }
          },
          "CreatecustomerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cw-customers/dev/1575274586882-2019-12-02T08:16:26.882Z/cw-customers.zip"
              },
              "FunctionName": "cw-customers-dev-createcustomer",
              "Handler": "handlers/addcustomer.createcustomer",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "CREATE_CR_LAMBDA_ARN": {
                    "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:cw-customers-dev-createcustomerresources"
                  }
                }
              }
            },
            "DependsOn": [
              "CreatecustomerLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "CreatecustomerLambdaVersionqnKppvfmWUzZcrLYumfO5dFtoNNMiMTmkCO4x7Y": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreatecustomerLambdaFunction"
              },
              "CodeSha256": "GO6Au7ltKxc1PnfoZjzkySbn8RfjAGPHzL3DcXp2QME="
            }
          },
          "AwsmanagerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cw-customers/dev/1575274586882-2019-12-02T08:16:26.882Z/cw-customers.zip"
              },
              "FunctionName": "cw-customers-dev-awsmanager",
              "Handler": "handlers/awsmanager.createUserPool",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "CREATE_CR_ROLE_ARN": {
                    "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/service-role/Poonam1-SMS1-Role1"
                  }
                }
              }
            },
            "DependsOn": [
              "AwsmanagerLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "AwsmanagerLambdaVersionpIVHxMBoM0xHBUTwqoiyZNhEgKHBmEuMaxNdGvE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AwsmanagerLambdaFunction"
              },
              "CodeSha256": "GO6Au7ltKxc1PnfoZjzkySbn8RfjAGPHzL3DcXp2QME="
            }
          },
          "CreatecustomerresourcesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cw-customers/dev/1575274586882-2019-12-02T08:16:26.882Z/cw-customers.zip"
              },
              "FunctionName": "cw-customers-dev-createcustomerresources",
              "Handler": "handlers/createcustomerresources.createcustomerresources",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAGE": "dev"
                }
              }
            },
            "DependsOn": [
              "CreatecustomerresourcesLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "CreatecustomerresourcesLambdaVersionOjc3old49DKehCFy68TcwDOnzybvjFxhzWNsSy4F9pQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreatecustomerresourcesLambdaFunction"
              },
              "CodeSha256": "GO6Au7ltKxc1PnfoZjzkySbn8RfjAGPHzL3DcXp2QME="
            }
          },
          "UpdatecustomerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cw-customers/dev/1575274586882-2019-12-02T08:16:26.882Z/cw-customers.zip"
              },
              "FunctionName": "cw-customers-dev-updatecustomer",
              "Handler": "handlers/updatecustomer.updatecustomer",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAGE": "dev"
                }
              }
            },
            "DependsOn": [
              "UpdatecustomerLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "UpdatecustomerLambdaVersion5K8uLIutBBOldoy0W5WfdlyAO5yBAgYcwdCRrrHHk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdatecustomerLambdaFunction"
              },
              "CodeSha256": "GO6Au7ltKxc1PnfoZjzkySbn8RfjAGPHzL3DcXp2QME="
            }
          },
          "AdmincustomerresourcesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cw-customers/dev/1575274586882-2019-12-02T08:16:26.882Z/cw-customers.zip"
              },
              "FunctionName": "cw-customers-dev-admincustomerresources",
              "Handler": "handlers/loaddata.customerresourcesdata",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAGE": "dev"
                }
              }
            },
            "DependsOn": [
              "AdmincustomerresourcesLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "AdmincustomerresourcesLambdaVersion3rv3xfjbhIJFhxOfbCh6ikYwyt5gD49SEJ56iQUx4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AdmincustomerresourcesLambdaFunction"
              },
              "CodeSha256": "GO6Au7ltKxc1PnfoZjzkySbn8RfjAGPHzL3DcXp2QME="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-cw-customers",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              }
            }
          },
          "ApiGatewayResourceCustomerid": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "customerid",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCustomeridCidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceCustomerid"
              },
              "PathPart": "{cid}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCuidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "{cuid}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodCustomeridCidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceCustomeridCidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodCustomeridOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceCustomerid"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodCuidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceCuidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodCustomeridCidVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCustomeridCidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetcustomerbyidLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodCustomeridPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCustomerid"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreatecustomerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodCuidVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCuidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdatecustomerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayDeployment1575274569417": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodCustomeridCidVarOptions",
              "ApiGatewayMethodCustomeridOptions",
              "ApiGatewayMethodCuidVarOptions",
              "ApiGatewayMethodCustomeridCidVarGet",
              "ApiGatewayMethodCustomeridPost",
              "ApiGatewayMethodCuidVarPut"
            ]
          },
          "GetcustomerbyidLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetcustomerbyidLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreatecustomerLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreatecustomerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdatecustomerLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdatecustomerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SMSRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "RoleName": "Poonam1-SMS1-Role1",
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "cognito-idp.amazonaws.com"
                      ]
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "MaxSessionDuration": 3600,
              "Policies": [
                {
                  "PolicyName": "Cognito-1509099821021",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "sns:publish"
                        ],
                        "Resource": "*"
                      }
                    ]
                  }
                }
              ],
              "Description": "SMS Role for SNS",
              "Path": "/service-role/"
            }
          },
          "CustomerTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "customers-dev",
              "AttributeDefinitions": [
                {
                  "AttributeName": "cid",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "cuid",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "cid",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "cuid",
                  "KeyType": "RANGE"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "AdminCustomerResourcesTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "admin-customer-resources-dev",
              "AttributeDefinitions": [
                {
                  "AttributeName": "name",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "name",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "CustomerResourcesTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "customer-resources-dev",
              "AttributeDefinitions": [
                {
                  "AttributeName": "name",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "name",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "GetcustomerbyidLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetcustomerbyidLambdaVersionWFu3Z9OdslZ04Yg9vB7wQpXl3e3GPwT9kuHMcqmBSnI"
            }
          },
          "CreatecustomerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreatecustomerLambdaVersionqnKppvfmWUzZcrLYumfO5dFtoNNMiMTmkCO4x7Y"
            }
          },
          "AwsmanagerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AwsmanagerLambdaVersionpIVHxMBoM0xHBUTwqoiyZNhEgKHBmEuMaxNdGvE"
            }
          },
          "CreatecustomerresourcesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreatecustomerresourcesLambdaVersionOjc3old49DKehCFy68TcwDOnzybvjFxhzWNsSy4F9pQ"
            }
          },
          "UpdatecustomerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdatecustomerLambdaVersion5K8uLIutBBOldoy0W5WfdlyAO5yBAgYcwdCRrrHHk"
            }
          },
          "AdmincustomerresourcesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AdmincustomerresourcesLambdaVersion3rv3xfjbhIJFhxOfbCh6ikYwyt5gD49SEJ56iQUx4"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "plugins": [
      "serverless-pseudo-parameters",
      "serverless-cognito-add-custom-attributes"
    ],
    "pluginsData": {},
    "functions": {
      "getcustomerbyid": {
        "handler": "handlers/getcustomerbyid.getcustomer",
        "events": [
          {
            "http": {
              "path": "customerid/{cid}",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cw-customers-dev-getcustomerbyid",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs10.x",
        "vpc": {}
      },
      "createcustomer": {
        "handler": "handlers/addcustomer.createcustomer",
        "environment": {
          "CREATE_CR_LAMBDA_ARN": "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:cw-customers-dev-createcustomerresources"
        },
        "events": [
          {
            "http": {
              "path": "customerid",
              "method": "post",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cw-customers-dev-createcustomer",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs10.x",
        "vpc": {}
      },
      "awsmanager": {
        "handler": "handlers/awsmanager.createUserPool",
        "environment": {
          "CREATE_CR_ROLE_ARN": "arn:aws:iam::#{AWS::AccountId}:role/service-role/Poonam1-SMS1-Role1"
        },
        "events": [],
        "name": "cw-customers-dev-awsmanager",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs10.x",
        "vpc": {}
      },
      "createcustomerresources": {
        "handler": "handlers/createcustomerresources.createcustomerresources",
        "events": [],
        "name": "cw-customers-dev-createcustomerresources",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs10.x",
        "vpc": {}
      },
      "updatecustomer": {
        "handler": "handlers/updatecustomer.updatecustomer",
        "events": [
          {
            "http": {
              "path": "{cuid}",
              "method": "put",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cw-customers-dev-updatecustomer",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs10.x",
        "vpc": {}
      },
      "admincustomerresources": {
        "handler": "handlers/loaddata.customerresourcesdata",
        "events": [],
        "name": "cw-customers-dev-admincustomerresources",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs10.x",
        "vpc": {}
      }
    },
    "resources": {
      "Resources": {
        "SMSRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "RoleName": "Poonam1-SMS1-Role1",
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "cognito-idp.amazonaws.com"
                    ]
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            },
            "MaxSessionDuration": 3600,
            "Policies": [
              {
                "PolicyName": "Cognito-1509099821021",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "sns:publish"
                      ],
                      "Resource": "*"
                    }
                  ]
                }
              }
            ],
            "Description": "SMS Role for SNS",
            "Path": "/service-role/"
          }
        },
        "CustomerTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "customers-dev",
            "AttributeDefinitions": [
              {
                "AttributeName": "cid",
                "AttributeType": "S"
              },
              {
                "AttributeName": "cuid",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "cid",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "cuid",
                "KeyType": "RANGE"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "AdminCustomerResourcesTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "admin-customer-resources-dev",
            "AttributeDefinitions": [
              {
                "AttributeName": "name",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "name",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "CustomerResourcesTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "customer-resources-dev",
            "AttributeDefinitions": [
              {
                "AttributeName": "name",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "name",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        }
      },
      "Outputs": {}
    },
    "serviceFilename": "serverless.yml",
    "layers": {},
    "artifact": "/home/poonam/CodeBlock/Projects/CecureCloud/Code/cecurecloud/apis/.serverless/cw-customers.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/cw-customers/dev/1575274586882-2019-12-02T08:16:26.882Z",
    "artifact": "cw-customers.zip"
  }
}